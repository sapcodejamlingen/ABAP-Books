REPORT  z_teilnehmerliste13_a.
*Einstieg in ABAP S. 404

*deklarationsteil
INCLUDE z_teilnehmer_deklarationen.

*Selektionsbildschirm deklarieren
INCLUDE zteilnehmer13_a_selektionsbild.

*Selektionsbildschirm deklarieren


*___________________________________________*
*Initialization

*---------------------------------------------*
*At selection screen

*---------------------------------------------*

START-OF-SELECTION.

*itab01 füllen
  PERFORM itab01_fuellen.
*itab02 füllen
  PERFORM itab_fuellen TABLES itab02.
*itab03 füllen
  PERFORM itab03_fuellen.
*itab04 füllen
  PERFORM itab04_fuellen TABLES itab04
              USING zzaehler_itab04 par04.

*---------------------------------------------*
END-OF-SELECTION.

*itab01 aufbereiten und in liste ausgeben
  PERFORM itab01_liste.
*itab02 verarbeiten und in liste ausgeben
  PERFORM itab02_liste.
*itab03 verarbeiten und in liste ausgeben
  PERFORM itab03_liste.
*itab04 verarbeiten und in liste ausgeben
  PERFORM itab04_liste USING par04 zzaehler_itab04.

*Workareas, Rumpf- Kopfzeilen initialisieren und Löschen
  PERFORM aufraeumen.

*Break-Point.
*Prüfen, ob der Report von einem anderen Report aufgerufen wurde
  PERFORM report_ruf_pruefen.
*Ende des Hauptprogramms
*---------------------------------------------*

*Beginn der Unterprogramme
FORM itab01_fuellen.
  CHECK par01 IS NOT INITIAL.
*dbtab lesen und itab01 füllen über workarea
  SELECT * FROM zteilnehmer2
          INTO wa_zteilnehmer2.
    MOVE-CORRESPONDING wa_zteilnehmer2 TO wa_itab01.
    APPEND wa_itab01 TO itab01.

  ENDSELECT.

ENDFORM.                    "itab01_fuellen


*&---------------------------------------------------------------------*
*&      Form  itab_fuellen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->ITAB_UNIVERSAL  text
*----------------------------------------------------------------------*
FORM itab_fuellen TABLES itab_universal.
  CHECK par02 IS NOT INITIAL.
*DBtab lesen und itab02 füllen über Array-Fetch
  SELECT * FROM zteilnehmer2
    INTO CORRESPONDING FIELDS OF TABLE itab02.

ENDFORM.                    "itab_fuellen


*&---------------------------------------------------------------------*
*&      Form  itab03_fuellen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM itab03_fuellen.
  DATA lok_tmax TYPE i VALUE 10.
  CHECK par03 IS NOT INITIAL.
*DBTab lesen und itab03 füllen über Kopfzeile und Zuweisung
  wa_itab03-maxteil = lok_tmax.
  SELECT * FROM zteilnehmer2 INTO wa_zteilnehmer2.
    wa_itab03-bezeichnung =
    wa_zteilnehmer2-zzkurstitel.
    wa_itab03-preis = wa_zteilnehmer2-tkurspreis.
    APPEND wa_itab03 TO itab03.
  ENDSELECT.
  PERFORM test.
ENDFORM.                    "itab03_fuellen



*&---------------------------------------------------------------------*
*&      Form  itab04_fuellen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LOK_ITAB      text
*      -->LOK_ZZAEHLER  text
*      -->LOK_PAR04     text
*----------------------------------------------------------------------*
FORM itab04_fuellen TABLES lok_itab USING lok_zzaehler lok_par04.
  CHECK lok_par04 IS NOT INITIAL.
*DBtab lesen und itab04 füllen über array-fetch
  SELECT * FROM zteilnehmer2
          INTO CORRESPONDING FIELDS OF TABLE itab04.
*Zahl der Rumpfzeileneinträge für itab01 lesen und ausgeben
  DESCRIBE TABLE lok_itab LINES lok_zzaehler.
ENDFORM.                    "itab04_fuellen


*&---------------------------------------------------------------------*
*&      Form  test
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM test.
  "Break-point
  "globale variable glob_tmax ist im Unterprogramm bekannt.
  "globale variable glob_tmax ist im Unterprogramm nicht bekannt.
ENDFORM.                    "test

*&---------------------------------------------------------------------*
*&      Form  itab_liste
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM itab01_liste.
  CHECK par01 IS NOT INITIAL.
* Zahl der Rumpfzeileneinträge für itab01 lesen und ausgeben
  DESCRIBE TABLE itab01 LINES zeilen_itab01.
  SKIP.
  WRITE: / 'Anzahl Zeilen itab01:',
           zeilen_itab01.

*Wa initilaisieren, füllen und neue Zeile in itab01 anhängen.
  CLEAR itab01.
  zeilen_itab01 = zeilen_itab01 + 1.

  wa_itab01-zzkurstitel = 'LINUX-GRUNDLAGEN'.
  wa_itab01-tkurspreis  = '456.78'.
  INSERT wa_itab01 INTO itab01 INDEX zeilen_itab01.

*Itab01 in Liste ausgeben
  SKIP.
  WRITE: / 'sy-tabix, itab01-zzkurstitel, itab01-tkkurspreis'."Überschr
  LOOP AT itab01 INTO wa_itab01.
    WRITE: / sy-tabix,
             wa_itab01-zzkurstitel,
             wa_itab01-tkurspreis.
  ENDLOOP.

*einen Satz aus itab01 über index lesen.löschen protokollieren
  READ TABLE itab01 INTO wa_itab01 INDEX 3.
  DELETE itab01 INDEX 3.
  SKIP.
  WRITE: / 'gelöscht von itab01',
              sy-tabix NO-GAP, '.Zeile:',
              wa_itab01-zzkurstitel,
              wa_itab01-tkurspreis.
ENDFORM.                    "itab_liste



*&---------------------------------------------------------------------*
*&      Form  itab02_liste
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM itab02_liste.
  CHECK par02 IS NOT INITIAL.
*itab02 verarbeiten und in liste ausgeben.
  SKIP.

  WRITE: / 'itab02-zzkurstitel, itab02-tkkurspreis, itab02-minteiln'.
  LOOP AT itab02 INTO wa_itab02
            WHERE zzkurstitel = 'PC-GRUNDLAGEN'.
    wa_itab02-minteiln = 2.
    WRITE: / wa_itab02-zzkurstitel,
         wa_itab02-tkurspreis,
         wa_itab02-minteiln.
  ENDLOOP.



* Geziehlt einen Satz aus itab02 über Schlüssel
*lesen, löschen, protokollieren
  READ TABLE itab02 INTO wa_itab02
  WITH KEY zzkurstitel = 'SAP-Grundlagen'.
  DELETE TABLE itab02 FROM wa_itab02.
  SKIP.
* write: / 'gelesen von itab03 Zeile, sy-tabix,
  WRITE: / 'gelöscht von itab02',
            sy-tabix NO-GAP, '.Zeile:',
            wa_itab02-zzkurstitel.
ENDFORM.                    "itab02_liste



*&---------------------------------------------------------------------*
*&      Form  itab03_liste
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM itab03_liste.
  CHECK par03 IS NOT INITIAL.
*itab03 verarbeiten, ausgeben und Rumpf modifizieren
  SKIP.
  WRITE: / 'itab03-bezeichnung, itab03-preis, itab-maxteil'.
  LOOP AT itab03 INTO wa_itab03.
    IF wa_itab03-bezeichnung = 'PC-GRUNDLAGEN'.
      wa_itab03-preis = 567.
      MODIFY itab03 FROM wa_itab03.
    ENDIF.
    WRITE: / wa_itab03-bezeichnung,
             wa_itab03-preis,
             wa_itab03-maxteil.
  ENDLOOP.


*Einen Satz aus itab03 mit index lesen und ausgebene
  READ TABLE itab03 INDEX 3 INTO wa_itab03.
  SKIP.
* write: / 'gelesen von itab03 Zeile, sy-tabix,
  WRITE: / 'gelesen von itab03',
            sy-tabix NO-GAP, '.Zeile:',
            wa_itab03-bezeichnung,
            wa_itab03-preis,
            wa_itab03-maxteil.


ENDFORM.                    "itab03_liste


*&---------------------------------------------------------------------*
*&      Form  itab04_liste
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->LOK_PAR04     text
*      -->LOK_ZZAEHLER  text
*----------------------------------------------------------------------*
FORM itab04_liste USING lok_par04 lok_zzaehler.
  CHECK lok_par04 IS NOT INITIAL.

* Einen Satz aus itab04 mit Schlüssel lesen und ausgeben
  READ TABLE itab04 INTO wa_itab04 WITH KEY
              mandant = sy-mandt tnummer = 5.
  SKIP.
  WRITE: / 'gelesen von itab04',
         / 'Zeilenzahl der Tabelle',
            lok_zzaehler,
            / 'Mandant',
            wa_itab04-mandant,
            'Teilnehmer',
            / wa_itab04-tnummer,
            / wa_itab04-tname,
            wa_itab04-tgeburtsdatum,
            wa_itab04-tgeschlecht.


ENDFORM.                    "itab04_liste

*&---------------------------------------------------------------------*
*&      Form  aufraeumen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM aufraeumen.
*Wirkung von Clear, refresh und free bei internen Tabellen m. Kopfzeile
  CLEAR wa_itab01. "Initialisiert Kopfzeile
  CLEAR itab01[]. "löscht Rumpfzeilen

  CLEAR wa_itab02. "Initialisiert Kopfzeile
  REFRESH itab02. "löscht Rumpfzeile

  CLEAR wa_itab03. "Initialisiert Kopfzeile
  FREE itab03. " Löscht Rumpfzeilen und gibt Speicherplatz frei
  SKIP.
ENDFORM.                    "aufraeumen



*&---------------------------------------------------------------------*
*&      Form  report_ruf_pruefen
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM report_ruf_pruefen.
  GET PARAMETER ID 'Z_TEST' FIELD progname.
  IF progname IS NOT INITIAL.
    repname = 'Z_TEILNEHMERLISTE13_A'.
    SKIP.
    WRITE: / 'Report', repname,
             'wurde aufgerufen von:', progname.
    IMPORT itab04 TO itab05 FROM MEMORY ID progname.
    SKIP.
    LOOP AT itab05 INTO wa_itab05.
      WRITE: / 'itab05-tname:', wa_itab05-tname.
    ENDLOOP.

    progname = space.
    SET PARAMETER ID 'Z_TEST' FIELD progname.
  ENDIF.

ENDFORM.                    "report_ruf_pruefen























*&---------------------------------------------------------------------*
*&  Include           ZTEILNEHMER13_A_SELEKTIONSBILD
*&---------------------------------------------------------------------*

*Block auf Selektionsbildschirm mit Rahmen und Rahmentext
SELECTION-SCREEN BEGIN OF BLOCK teilnehmer WITH FRAME TITLE text-001.
PARAMETERS: par01 AS CHECKBOX,
            par02 AS CHECKBOX,
            par03 AS CHECKBOX,
            par04 AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK teilnehmer.














*&---------------------------------------------------------------------*
*&  Include           Z_TEILNEHMER_DEKLARATIONEN
*&---------------------------------------------------------------------*

*Tabellenarbeitsbereiche deklarieren
DATA wa_zteilnehmer2 TYPE zteilnehmer2.

*Felder Deklarieren
DATA: zeilen_itab01 TYPE i,
      glob_tmax type i value 12,
      lokale_datei type string,
      progname(25),
      repname like progname,
      zzaehler_itab04.
.

*Datentypen für Zeilen deklarieren
TYPES: BEGIN OF zeile01_typ,
        zzkurstitel LIKE
        zteilnehmer2-zzkurstitel,
        tkurspreis LIKE
        zteilnehmer2-tkurspreis,
  END OF zeile01_typ.

TYPES BEGIN OF zeile02_typ.
INCLUDE TYPE zeile01_typ.
TYPES minteiln TYPE i.
TYPES END OF zeile02_typ.

TYPES: BEGIN OF zeile03_typ,
        bezeichnung LIKE zteilnehmer2-zzkurstitel,
        preis LIKE zteilnehmer2-tkurspreis,
        maxteil TYPE i,
  END OF zeile03_typ.

TYPES zeile04_typ TYPE zteilnehmer2.

*Datentypen für interne Tabellen deklarieren
TYPES itab01_typ TYPE STANDARD TABLE OF zeile01_typ.
TYPES itab02_typ TYPE STANDARD TABLE OF zeile02_typ.
TYPES itab03_typ TYPE STANDARD TABLE OF zeile03_typ.
TYPES itab04_typ TYPE STANDARD TABLE OF zeile04_typ.

*Interne Tabellen deklarieren ohne Kopfzeile
DATA itab01 TYPE itab01_typ.
DATA itab02 TYPE itab02_typ.
DATA itab03 TYPE itab03_typ.
DATA itab04 TYPE itab04_typ.
data itab05 type itab04_typ.

*Workarea für interne Tabelle deklarieren
DATA wa_itab01 TYPE zeile01_typ.
DATA wa_itab02 TYPE zeile02_typ.
DATA wa_itab03 TYPE zeile03_typ.
DATA wa_itab04 TYPE zeile04_typ.
DATA wa_itab05 TYPE zeile04_typ.


